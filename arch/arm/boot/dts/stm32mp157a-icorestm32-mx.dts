/* SPDX-License-Identifier: (GPL-2.0+ OR BSD-3-Clause) */
/*
 * Copyright (C) STMicroelectronics 2019 - All Rights Reserved
 * Author: STM32CubeMX code generation for STMicroelectronics.
 */

/dts-v1/;
#include "stm32mp157c.dtsi"
#include "stm32mp157c-m4-srm.dtsi"
#include "stm32mp157caa-pinctrl.dtsi"
#include <dt-bindings/gpio/gpio.h>
#include <dt-bindings/input/input.h>

/* USER CODE BEGIN includes */
/* USER CODE END includes */

/ {
	model = "STMicroelectronics custom STM32CubeMX board";
	compatible = "st,stm32mp157a-icorestm32-mx", "st,stm32mp157";

    memory@c0000000 {
        reg = <0xc0000000 0x20000000>;

        /* USER CODE BEGIN memory */
        /* USER CODE END memory */
    };

    reserved-memory {
        #address-cells = <1>;
        #size-cells = <1>;
        ranges;

        /* USER CODE BEGIN reserved-memory */

		retram: retram@0x38000000 {
			compatible = "shared-dma-pool";
			reg = <0x38000000 0x10000>;
			no-map;
		};

		mcuram: mcuram@0x30000000 {
			compatible = "shared-dma-pool";
			reg = <0x30000000 0x40000>;
			no-map;
		};

		mcuram2: mcuram2@0x10000000 {
			compatible = "shared-dma-pool";
			reg = <0x10000000 0x40000>;
			no-map;
		};

		vdev0vring0: vdev0vring0@10040000 {
			compatible = "shared-dma-pool";
			reg = <0x10040000 0x2000>;
			no-map;
		};

		vdev0vring1: vdev0vring1@10042000 {
			compatible = "shared-dma-pool";
			reg = <0x10042000 0x2000>;
			no-map;
		};

		vdev0buffer: vdev0buffer@10044000 {
			compatible = "shared-dma-pool";
			reg = <0x10044000 0x4000>;
			no-map;
		};

        /* USER CODE END reserved-memory */

        gpu_reserved: gpu@dc000000 {
            reg = <0xdc000000 0x4000000>;
            no-map;
        };
    };

	vddcore: regulator-vddcore {
		compatible = "regulator-fixed";
		regulator-name = "vddcore";
		regulator-min-microvolt = <1200000>;
		regulator-max-microvolt = <1200000>;
		regulator-always-on;
	};

	vdd: regulator-vdd {
		compatible = "regulator-fixed";
		regulator-name = "vdd";
		regulator-min-microvolt = <3300000>;
		regulator-max-microvolt = <3300000>;
		regulator-always-on;
	};

	vdd_usb: regulator-vdd_usb {
		compatible = "regulator-fixed";
		regulator-name = "vdd_usb";
		regulator-min-microvolt = <3300000>;
		regulator-max-microvolt = <3300000>;
		regulator-always-on;
	};

	vdda: regulator-vdda {
		compatible = "regulator-fixed";
		regulator-name = "vdda";
		regulator-min-microvolt = <3300000>;
		regulator-max-microvolt = <3300000>;
		regulator-always-on;
	};

	vdd_ddr: regulator-vdd_ddr {
		compatible = "regulator-fixed";
		regulator-name = "vdd_ddr";
		regulator-min-microvolt = <1350000>;
		regulator-max-microvolt = <1350000>;
		regulator-always-on;
	};

	vtt_ddr: regulator-vtt_ddr {
		compatible = "regulator-fixed";
		regulator-name = "vtt_ddr";
		regulator-min-microvolt = <675000>;
		regulator-max-microvolt = <675000>;
		regulator-always-on;
		vin-supply = <&vdd>;
	};

	vref_ddr: regulator-vref_ddr {
		compatible = "regulator-fixed";
		regulator-name = "vref_ddr";
		regulator-min-microvolt = <675000>;
		regulator-max-microvolt = <675000>;
		regulator-always-on;
		vin-supply = <&vdd>;
	};

	vdd_sd: regulator-vdd_sd {
		compatible = "regulator-fixed";
		regulator-name = "vdd_sd";
		regulator-min-microvolt = <3300000>;
		regulator-max-microvolt = <3300000>;
		regulator-always-on;
	};

	v3v3: regulator-v3v3 {
		compatible = "regulator-fixed";
		regulator-name = "v3v3";
		regulator-min-microvolt = <3300000>;
		regulator-max-microvolt = <3300000>;
		regulator-always-on;
	};

	v2v8: regulator-v2v8 {
		compatible = "regulator-fixed";
		regulator-name = "v2v8";
		regulator-min-microvolt = <2800000>;
		regulator-max-microvolt = <2800000>;
		regulator-always-on;
		vin-supply = <&v3v3>;
	};

	v1v8: regulator-v1v8 {
		compatible = "regulator-fixed";
		regulator-name = "v1v8";
		regulator-min-microvolt = <1800000>;
		regulator-max-microvolt = <1800000>;
		regulator-always-on;
		vin-supply = <&v3v3>;
	};

	lcd_3v3: regulator-lcd_3v3 {
		compatible = "regulator-fixed";
		regulator-name = "lcd_3v3";
		regulator-min-microvolt = <3300000>;
		regulator-max-microvolt = <3300000>;
		gpio = <&gpiof 10 0>;
		enable-active-high;
		regulator-always-on;
	};

	/* USER CODE BEGIN root */
	
	sram: sram@10050000 {
		compatible = "mmio-sram";
		reg = <0x10050000 0x10000>;
		#address-cells = <1>;
		#size-cells = <1>;
		ranges = <0 0x10050000 0x10000>;

		dma_pool: dma_pool@0 {
			reg = <0x0 0x10000>;
			pool;
		};
	};
	
    aliases {
		ethernet0 = &ethernet0;
		serial0 = &uart4;
		serial1 = &uart8;
		serial2 = &usart3;
		serial3 = &uart7;
		serial4 = &usart1;		
	};

	usb_phy_tuning: usb-phy-tuning {
		st,hs-dc-level = <2>;
		st,fs-rftime-tuning;
		st,hs-rftime-reduction;
		st,hs-current-trim = <15>;
		st,hs-impedance-trim = <1>;
		st,squelch-level = <3>;
		st,hs-rx-offset = <2>;
		st,no-lsfs-sc;
	};
	
	led {
		compatible = "gpio-leds";
		blue {
			label = "usb_hub";
			gpios = <&gpioi 1 GPIO_ACTIVE_HIGH>;
			default-state = "on";
		};
	};
	
	/* USER CODE END root */

    clocks {
        /* USER CODE BEGIN clocks */
        /* USER CODE END clocks */

        clk_lsi: clk-lsi {
            clock-frequency = <32000>;
        };
        clk_hsi: clk-hsi {
            clock-frequency = <64000000>;
        };
        clk_csi: clk-csi {
            clock-frequency = <4000000>;
        };
        clk_hse: clk-hse {
            clock-frequency = <24000000>;
        };

        clk_mrclk: clk-mrclk {
            #clock-cells = <0>;
            compatible = "fixed-clock";
            clock-frequency = <31000000>;
        };
    };

    panel_rgb: panel-rgb {
		compatible = "ampire,am800480r3tmqwa1h";
		status = "okay";
		port {
			panel_in_rgb: endpoint {
				remote-endpoint = <&ltdc_out_rgb>;
			};
		};
	};
	
    panel_backlight: panel-backlight {
            compatible = "gpio-backlight";
            gpios = <&gpiod 13 GPIO_ACTIVE_HIGH>;
            default-on;
            status = "okay";
    };

	sound {
		compatible = "audio-graph-card";
		label = "i.Core STM32MP1";
		routing =
			"Playback" , "MCLK",
			"Capture" , "MCLK";
		dais = <&sai2a_port &sai2b_port>;
		status = "okay";
	};

}; 


/*root*/

&pinctrl {
    u-boot,dm-pre-reloc;

    eth1_pins_mx: eth1_mx-0 {
				pins {
					pinmux =  <STM32_PINMUX('A', 1, AF0)>, /* ETH_CLK */
						 <STM32_PINMUX('A', 2, AF11)>, /* ETH_MDIO */
						 <STM32_PINMUX('C', 1, AF11)>, /* ETH_MDC */
						 <STM32_PINMUX('A', 7, AF11)>, /* ETH_RX_DV */
						 <STM32_PINMUX('B', 11, AF11)>, /* ETH_TX_EN */
						 <STM32_PINMUX('C', 4, AF11)>, /* ETH_RX_D0 */
						 <STM32_PINMUX('C', 5, AF11)>, /* ETH_RX_D1 */
						 <STM32_PINMUX('G', 13, AF11)>, /* ETH_TX_D0 */
						 <STM32_PINMUX('G', 14, AF11)>; /* ETH_TX_D1 */
					bias-disable;
					drive-push-pull;
					slew-rate = <3>;
				};
/*				
				pins2 {
                    pinmux = <STM32_PINMUX('D', 10, GPIO)>;
                    bias-pull-up;
                    drive-push-pull;
                    output-high;
                    slew-rate = <0>;
                };
*/
    };


    fdcan1_pins_mx: fdcan1_mx-0 {
        pins1 {
            pinmux = <STM32_PINMUX('H', 13, AF9)>; /* FDCAN1_TX */
            bias-disable;
            drive-push-pull;
            slew-rate = <0>;
        };
        pins2 {
            pinmux = <STM32_PINMUX('H', 14, AF9)>; /* FDCAN1_RX */
            bias-disable;
        };
    };
    fmc_pins_mx: fmc_mx-0 {
        u-boot,dm-pre-reloc;
        pins1 {
            u-boot,dm-pre-reloc;
            pinmux = <STM32_PINMUX('D', 0, AF12)>, /* FMC_D2 */
                     <STM32_PINMUX('D', 1, AF12)>, /* FMC_D3 */
                     <STM32_PINMUX('D', 4, AF12)>, /* FMC_NOE */
                     <STM32_PINMUX('D', 5, AF12)>, /* FMC_NWE */
                     <STM32_PINMUX('D', 11, AF12)>, /* FMC_CLE */
                     <STM32_PINMUX('D', 12, AF12)>, /* FMC_ALE */
                     <STM32_PINMUX('D', 14, AF12)>, /* FMC_D0 */
                     <STM32_PINMUX('D', 15, AF12)>, /* FMC_D1 */
                     <STM32_PINMUX('E', 7, AF12)>, /* FMC_D4 */
                     <STM32_PINMUX('E', 8, AF12)>, /* FMC_D5 */
                     <STM32_PINMUX('E', 9, AF12)>, /* FMC_D6 */
                     <STM32_PINMUX('E', 10, AF12)>, /* FMC_D7 */
                     <STM32_PINMUX('G', 9, AF12)>; /* FMC_NCE */
            bias-disable;
            drive-push-pull;
            slew-rate = <1>;
        };
        pins2 {
            u-boot,dm-pre-reloc;
            pinmux = <STM32_PINMUX('D', 6, AF12)>; /* FMC_NWAIT */
            bias-disable;
        };
    };
    i2c2_pins_mx: i2c2_mx-0 {
        pins {
            pinmux = <STM32_PINMUX('H', 4, AF4)>, /* I2C2_SCL */
                     <STM32_PINMUX('H', 5, AF4)>; /* I2C2_SDA */
            bias-disable;
            drive-open-drain;
            slew-rate = <0>;
        };
    };

    sai2a_pins_mx: sai2a_mx-0 {
        pins {
            pinmux = <STM32_PINMUX('E', 0, AF10)>, /* SAI2_MCLK_A */
                     <STM32_PINMUX('I', 5, AF10)>, /* SAI2_SCK_A */
                     <STM32_PINMUX('I', 6, AF10)>, /* SAI2_SD_A */
                     <STM32_PINMUX('I', 7, AF10)>; /* SAI2_FS_A */
            bias-disable;
            drive-push-pull;
            slew-rate = <0>;
        };
    };
    sai2b_pins_mx: sai2b_mx-0 {
        pins {
            pinmux = <STM32_PINMUX('C', 0, AF8)>, /* SAI2_FS_B */
                     <STM32_PINMUX('E', 6, AF10)>, /* SAI2_MCLK_B */
                     <STM32_PINMUX('F', 11, AF10)>, /* SAI2_SD_B */
                     <STM32_PINMUX('H', 2, AF10)>; /* SAI2_SCK_B */
            bias-disable;
            drive-push-pull;
            slew-rate = <0>;
        };
    };
    sdmmc1_pins_mx: sdmmc1_mx-0 {
        u-boot,dm-pre-reloc;
        pins1 {
            u-boot,dm-pre-reloc;
            pinmux = <STM32_PINMUX('C', 8, AF12)>, /* SDMMC1_D0 */
                     <STM32_PINMUX('C', 9, AF12)>, /* SDMMC1_D1 */
                     <STM32_PINMUX('C', 10, AF12)>, /* SDMMC1_D2 */
                     <STM32_PINMUX('C', 11, AF12)>, /* SDMMC1_D3 */
                     <STM32_PINMUX('D', 2, AF12)>; /* SDMMC1_CMD */
            bias-disable;
            drive-push-pull;
            slew-rate = <1>;
        };
        pins2 {
            u-boot,dm-pre-reloc;
            pinmux = <STM32_PINMUX('C', 12, AF12)>; /* SDMMC1_CK */
            bias-disable;
            drive-push-pull;
            slew-rate = <3>;
        };
    };
    sdmmc2_pins_mx: sdmmc2_mx-0 {
        u-boot,dm-pre-reloc;
        pins1 {
            u-boot,dm-pre-reloc;
					pinmux = <STM32_PINMUX('B', 14, AF9)>, /* SDMMC2_D0 */
						 <STM32_PINMUX('B', 15, AF9)>, /* SDMMC2_D1 */
						 <STM32_PINMUX('B', 3, AF9)>, /* SDMMC2_D2 */
						 <STM32_PINMUX('B', 4, AF9)>, /* SDMMC2_D3 */						 
						 <STM32_PINMUX('G', 6, AF10)>, /* SDMMC2_CMD */
						 <STM32_PINMUX('A', 8, AF9)>, /* SDMMC2_D4 */
						 <STM32_PINMUX('A', 9, AF10)>, /* SDMMC2_D5 */
						 <STM32_PINMUX('E', 5, AF9)>, /* SDMMC2_D6 */
						 <STM32_PINMUX('D', 3, AF9)>; /* SDMMC2_D7 */
					slew-rate = <3>;
					drive-push-pull;
					bias-pull-up;
        };
        pins2 {
            u-boot,dm-pre-reloc;
            pinmux = <STM32_PINMUX('E', 3, AF9)>; /* SDMMC2_CK */
            bias-disable;
            drive-push-pull;
            slew-rate = <3>;
        };
    };
    uart4_pins_mx: uart4_mx-0 {
        u-boot,dm-pre-reloc;
        pins1 {
            u-boot,dm-pre-reloc;
            pinmux = <STM32_PINMUX('G', 11, AF6)>; /* UART4_TX */
            bias-disable;
            drive-push-pull;
            slew-rate = <0>;
        };
        pins2 {
            u-boot,dm-pre-reloc;
            pinmux = <STM32_PINMUX('B', 2, AF8)>; /* UART4_RX */
            bias-disable;
        };
    };

    eth1_sleep_pins_mx: eth1_sleep_mx-0 {
        pins {
            pinmux = <STM32_PINMUX('A', 1, ANALOG)>, /* ETH1_CLK */
                     <STM32_PINMUX('A', 2, ANALOG)>, /* ETH1_MDIO */
                     <STM32_PINMUX('A', 7, ANALOG)>, /* ETH1_CRS_DV */
                     <STM32_PINMUX('B', 11, ANALOG)>, /* ETH1_TX_EN */
                     <STM32_PINMUX('C', 1, ANALOG)>, /* ETH1_MDC */
                     <STM32_PINMUX('C', 4, ANALOG)>, /* ETH1_RXD0 */
                     <STM32_PINMUX('C', 5, ANALOG)>, /* ETH1_RXD1 */
                     <STM32_PINMUX('G', 8, ANALOG)>, /* ETH1_PPS_OUT */
                     <STM32_PINMUX('G', 13, ANALOG)>, /* ETH1_TXD0 */
                     <STM32_PINMUX('G', 14, ANALOG)>; /* ETH1_TXD1 */
        };
    };
    fdcan1_sleep_pins_mx: fdcan1_sleep_mx-0 {
        pins {
            pinmux = <STM32_PINMUX('H', 13, ANALOG)>, /* FDCAN1_TX */
                     <STM32_PINMUX('H', 14, ANALOG)>; /* FDCAN1_RX */
        };
    };
    fmc_sleep_pins_mx: fmc_sleep_mx-0 {
        u-boot,dm-pre-reloc;
        pins {
            u-boot,dm-pre-reloc;
            pinmux = <STM32_PINMUX('D', 0, ANALOG)>, /* FMC_D2 */
                     <STM32_PINMUX('D', 1, ANALOG)>, /* FMC_D3 */
                     <STM32_PINMUX('D', 4, ANALOG)>, /* FMC_NOE */
                     <STM32_PINMUX('D', 5, ANALOG)>, /* FMC_NWE */
                     <STM32_PINMUX('D', 6, ANALOG)>, /* FMC_NWAIT */
                     <STM32_PINMUX('D', 11, ANALOG)>, /* FMC_CLE */
                     <STM32_PINMUX('D', 12, ANALOG)>, /* FMC_ALE */
                     <STM32_PINMUX('D', 14, ANALOG)>, /* FMC_D0 */
                     <STM32_PINMUX('D', 15, ANALOG)>, /* FMC_D1 */
                     <STM32_PINMUX('E', 7, ANALOG)>, /* FMC_D4 */
                     <STM32_PINMUX('E', 8, ANALOG)>, /* FMC_D5 */
                     <STM32_PINMUX('E', 9, ANALOG)>, /* FMC_D6 */
                     <STM32_PINMUX('E', 10, ANALOG)>, /* FMC_D7 */
                     <STM32_PINMUX('G', 9, ANALOG)>; /* FMC_NCE */
        };
    };
    i2c2_sleep_pins_mx: i2c2_sleep_mx-0 {
        pins {
            pinmux = <STM32_PINMUX('H', 4, ANALOG)>, /* I2C2_SCL */
                     <STM32_PINMUX('H', 5, ANALOG)>; /* I2C2_SDA */
        };
    };

    sai2a_sleep_pins_mx: sai2a_sleep_mx-0 {
        pins {
            pinmux = <STM32_PINMUX('E', 0, ANALOG)>, /* SAI2_MCLK_A */
                     <STM32_PINMUX('I', 5, ANALOG)>, /* SAI2_SCK_A */
                     <STM32_PINMUX('I', 6, ANALOG)>, /* SAI2_SD_A */
                     <STM32_PINMUX('I', 7, ANALOG)>; /* SAI2_FS_A */
        };
    };
    sai2b_sleep_pins_mx: sai2b_sleep_mx-0 {
        pins {
            pinmux = <STM32_PINMUX('C', 0, ANALOG)>, /* SAI2_FS_B */
                     <STM32_PINMUX('E', 6, ANALOG)>, /* SAI2_MCLK_B */
                     <STM32_PINMUX('F', 11, ANALOG)>, /* SAI2_SD_B */
                     <STM32_PINMUX('H', 2, ANALOG)>; /* SAI2_SCK_B */
        };
    };
    sdmmc1_sleep_pins_mx: sdmmc1_sleep_mx-0 {
        u-boot,dm-pre-reloc;
        pins {
            u-boot,dm-pre-reloc;
            pinmux = <STM32_PINMUX('C', 8, ANALOG)>, /* SDMMC1_D0 */
                     <STM32_PINMUX('C', 9, ANALOG)>, /* SDMMC1_D1 */
                     <STM32_PINMUX('C', 10, ANALOG)>, /* SDMMC1_D2 */
                     <STM32_PINMUX('C', 11, ANALOG)>, /* SDMMC1_D3 */
                     <STM32_PINMUX('C', 12, ANALOG)>, /* SDMMC1_CK */
                     <STM32_PINMUX('D', 2, ANALOG)>; /* SDMMC1_CMD */
        };
    };
    sdmmc2_sleep_pins_mx: sdmmc2_sleep_mx-0 {
        u-boot,dm-pre-reloc;
        pins {
            u-boot,dm-pre-reloc;
            pinmux = <STM32_PINMUX('A', 8, ANALOG)>, /* SDMMC2_D4 */
                     <STM32_PINMUX('A', 9, ANALOG)>, /* SDMMC2_D5 */
                     <STM32_PINMUX('B', 3, ANALOG)>, /* SDMMC2_D2 */
                     <STM32_PINMUX('B', 4, ANALOG)>, /* SDMMC2_D3 */
                     <STM32_PINMUX('B', 14, ANALOG)>, /* SDMMC2_D0 */
                     <STM32_PINMUX('B', 15, ANALOG)>, /* SDMMC2_D1 */
                     <STM32_PINMUX('D', 3, ANALOG)>, /* SDMMC2_D7 */
                     <STM32_PINMUX('E', 3, ANALOG)>, /* SDMMC2_CK */
                     <STM32_PINMUX('E', 5, ANALOG)>, /* SDMMC2_D6 */
                     <STM32_PINMUX('G', 6, ANALOG)>; /* SDMMC2_CMD */
        };
    };
    uart4_sleep_pins_mx: uart4_sleep_mx-0 {
        u-boot,dm-pre-reloc;
        pins {
            u-boot,dm-pre-reloc;
            pinmux = <STM32_PINMUX('B', 2, ANALOG)>, /* UART4_RX */
                     <STM32_PINMUX('G', 11, ANALOG)>; /* UART4_TX */
        };
    };

    pinctrl_st1232_ts: pinctrl_st1232_ts-0 {
            pins {
			pinmux = <STM32_PINMUX('I', 4, GPIO)>;
		};
	};	

    lcd_pins_icore: lcd-0 {
        pins {
            pinmux = <STM32_PINMUX('I', 12,  AF14)>,/* LCD_HSYNC */
                    <STM32_PINMUX('I', 13,  AF14)>,/* LCD_VSYNC */
                    <STM32_PINMUX('I', 14,  AF14)>,/* LCD_PIXCLK */
                    <STM32_PINMUX('I', 15,  AF14)>,/* LCD_R0 */
                    <STM32_PINMUX('J', 0,  AF14)>,/* LCD_R1 */
                    <STM32_PINMUX('J', 1,  AF14)>,/* LCD_R2 */
                    <STM32_PINMUX('J', 2,  AF14)>,/* LCD_R3 */
                    <STM32_PINMUX('J', 3,  AF14)>,/* LCD_R4 */
                    <STM32_PINMUX('J', 4,  AF14)>,/* LCD_R5 */
                    <STM32_PINMUX('J', 5,  AF14)>,/* LCD_R6 */
                    <STM32_PINMUX('J', 6,  AF14)>,/* LCD_R7 */
                    <STM32_PINMUX('J', 7,  AF14)>,/* LCD_G0 */
                    <STM32_PINMUX('J', 8,  AF14)>,/* LCD_G1 */
                    <STM32_PINMUX('J', 9,  AF14)>,/* LCD_G2 */
                    <STM32_PINMUX('J', 10,  AF14)>,/* LCD_G3 */
                    <STM32_PINMUX('J', 11,  AF14)>,/* LCD_G4 */
                    <STM32_PINMUX('J', 12,  AF14)>,/* LCD_B0 */
                    <STM32_PINMUX('J', 13,  AF14)>,/* LCD_B1 */
                    <STM32_PINMUX('J', 14,  AF14)>,/* LCD_B2 */
                    <STM32_PINMUX('J', 15,  AF14)>,/* LCD_B3 */
                    <STM32_PINMUX('K', 0,  AF14)>,/* LCD_G5 */
                    <STM32_PINMUX('K', 1,  AF14)>,/* LCD_G6 */
                    <STM32_PINMUX('K', 2,  AF14)>,/* LCD_G7 */
                    <STM32_PINMUX('K', 3,  AF14)>,/* LCD_B4 */
                    <STM32_PINMUX('K', 4,  AF14)>,/* LCD_B5 */
                    <STM32_PINMUX('K', 5,  AF14)>,/* LCD_B6 */
                    <STM32_PINMUX('K', 6,  AF14)>,/* LCD_B7 */
                    <STM32_PINMUX('K', 7,  AF14)>;/* LCD_DE */
            bias-disable;
            drive-push-pull;
            slew-rate = <3>;
        };
    };
};

&pinctrl_z {
    u-boot,dm-pre-reloc;
    i2c6_pins_z_mx: i2c6_mx-0 {
        pins {
            pinmux = <STM32_PINMUX('Z', 7, AF2)>, /* I2C6_SDA */
                     <STM32_PINMUX('Z', 6, AF2)>; /* I2C6_SCL */
            bias-disable;
            drive-open-drain;
            slew-rate = <0>;
        };
    };
    i2c6_sleep_pins_z_mx: i2c6_sleep_mx-0 {
        pins {
            pinmux = <STM32_PINMUX('Z', 7, ANALOG)>, /* I2C6_SDA */
                     <STM32_PINMUX('Z', 6, ANALOG)>; /* I2C6_SCL */
        };
    };
};

&m4_rproc{
    recovery;
    status = "okay";

    /* USER CODE BEGIN m4_rproc */
    /* USER CODE END m4_rproc */
};

&bsec{
    status = "okay";

    /* USER CODE BEGIN bsec */
    /* USER CODE END bsec */
};


&fmc{
    u-boot,dm-pre-reloc;
    pinctrl-names = "default", "sleep";
    pinctrl-0 = <&fmc_pins_mx>;
    pinctrl-1 = <&fmc_sleep_pins_mx>;
    status = "okay";

    /* USER CODE BEGIN fmc */
    /* USER CODE END fmc */
};

&gpu{
    status = "okay";

    /* USER CODE BEGIN gpu */
    /* USER CODE END gpu */
};

&i2c2 {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&i2c2_pins_mx>;
	pinctrl-1 = <&i2c2_sleep_pins_mx>;
	i2c-scl-rising-time-ns = <185>;
	i2c-scl-falling-time-ns = <20>;
	status = "okay";
	/delete-property/dmas;
	/delete-property/dma-names;


	polytouch: st1232_ts@55 {
		compatible = "sitronix,st1232-ts";
		reg = <0x55>;
		pinctrl-names = "default";		
		pinctrl-0 = <&pinctrl_st1232_ts>;
		interrupt-parent = <&gpioi>;
		interrupts = <4 2>;	
    };

	codec: sgtl5000@a {
		compatible = "fsl,sgtl5000";
		#sound-dai-cells = <0>;
		reg = <0x0a>;
		status = "okay";

		clocks = <&sai2a>;
		clock-names = "MCLK";

		VDDA-supply = <&v3v3>;
		VDDIO-supply = <&v3v3>;
		
		ports {
			#address-cells = <1>;
			#size-cells = <0>;

			sgtl5000_tx_port: port-0 {
                	reg = <0>;
				sgtl5000_tx_endpoint: endpoint {
					remote-endpoint = <&sai2a_endpoint>;
				};
			};

			sgtl5000_rx_port: port@1 {
                	reg = <1>;
				sgtl5000_rx_endpoint: endpoint {
					remote-endpoint = <&sai2b_endpoint>;
				};
			};
		};
	};
};

&i2c6{
    pinctrl-names = "default", "sleep";
    pinctrl-0 = <&i2c6_pins_z_mx>;
    pinctrl-1 = <&i2c6_sleep_pins_z_mx>;
	i2c-scl-rising-time-ns = <185>;
	i2c-scl-falling-time-ns = <20>;
	status = "okay";
	/delete-property/dmas;
	/delete-property/dma-names;

    /* USER CODE BEGIN i2c6 */
    /* USER CODE END i2c6 */
};


&m_can1{
    pinctrl-names = "default", "sleep";
    pinctrl-0 = <&fdcan1_pins_mx>;
    pinctrl-1 = <&fdcan1_sleep_pins_mx>;
    status = "okay";

    /* USER CODE BEGIN m_can1 */
    /* USER CODE END m_can1 */
};

&iwdg2{
    status = "okay";

    /* USER CODE BEGIN iwdg2 */
    /* USER CODE END iwdg2 */
};


&rcc{
    u-boot,dm-pre-reloc;
    status = "okay";

    /* USER CODE BEGIN rcc */
    /* USER CODE END rcc */
};

&rtc{
    status = "okay";

    /* USER CODE BEGIN rtc */
    /* USER CODE END rtc */
};

&ltdc {
	status = "okay";
	pinctrl-0 = <&lcd_pins_icore>;
	pinctrl-names = "default";
	
    backlight = <&panel_backlight>;

	port {
        #address-cells = <1>;
		#size-cells = <0>;
		
		ltdc_out_rgb: endpoint@0 {
            reg = <0>;
			remote-endpoint = <&panel_in_rgb>;
		};
	};
};

&sai2 {
	clocks = <&rcc SAI2>, <&rcc PLL3_Q>, <&rcc PLL4_Q>;
	clock-names = "pclk", "x8k", "x11k";
	status = "okay";
    frame-master;
    bitclock-master;
	sai2a: audio-controller@4400b004 {
		#clock-cells = <0>;
		pinctrl-names = "default";
		pinctrl-0 = <&sai2a_pins_mx>;
		dma-names = "tx";
		clocks = <&rcc SAI2_K>, <&sai2a>;
		clock-names = "sai_ck", "MCLK";
		status = "okay";
		
		sai2a_port: port@0 {
			sai2a_endpoint: endpoint {
				remote-endpoint = <&sgtl5000_tx_endpoint>;
				format = "i2s";
				mclk-fs = <256>;
			};
		};
	};

	sai2b: audio-controller@4400b024 {
		pinctrl-names = "default";
		pinctrl-0 = <&sai2b_pins_mx>;
		dma-names = "rx";
		clocks = <&rcc SAI2_K>, <&sai2a>;
		clock-names = "sai_ck", "MCLK";
		st,sync = <&sai2a 2>;
		status = "okay";

		sai2b_port: port@0 {
			sai2b_endpoint: endpoint {
				remote-endpoint = <&sgtl5000_rx_endpoint>;
				format = "i2s";
				mclk-fs = <256>;
			};
		};
	};
};
&sdmmc1{
    u-boot,dm-pre-reloc;
    pinctrl-names = "default", "sleep";
    pinctrl-0 = <&sdmmc1_pins_mx>;
    pinctrl-1 = <&sdmmc1_sleep_pins_mx>;
    status = "okay";

    /* USER CODE BEGIN sdmmc1 */
    broken-cd;
	st,neg-edge;
	bus-width = <4>;
	max-frequency = <10000000>;
	vmmc-supply = <&v3v3>;
    /* USER CODE END sdmmc1 */
};

&sdmmc2{
    u-boot,dm-pre-reloc;
    pinctrl-names = "default", "sleep";
    pinctrl-0 = <&sdmmc2_pins_mx>;
    pinctrl-1 = <&sdmmc2_sleep_pins_mx>;
    status = "okay";

    /* USER CODE BEGIN sdmmc2 */  
    non-removable;
	no-sd;
	no-sdio;
	st,dirpol;
	st,negedge;
	bus-width = <8>;
	vmmc-supply = <&v3v3>;
	vqmmc-supply = <&v3v3>;
    /* USER CODE END sdmmc2 */
};

&uart4{
    u-boot,dm-pre-reloc;
    pinctrl-names = "default", "sleep";
    pinctrl-0 = <&uart4_pins_mx>;
    pinctrl-1 = <&uart4_sleep_pins_mx>;
    status = "okay";

    /* USER CODE BEGIN uart4 */
    /* USER CODE END uart4 */
};

&usbh_ehci{
    status = "okay";

    /* USER CODE BEGIN usbh_ehci */
    /* USER CODE END usbh_ehci */
};

&usbh_ohci{
    status = "okay";

    /* USER CODE BEGIN usbh_ohci */
    /* USER CODE END usbh_ohci */
};


&usbphyc{
    u-boot,dm-pre-reloc;
    status = "okay";

    /* USER CODE BEGIN usbphyc */
    /* USER CODE END usbphyc */
};

&usbphyc_port0{
    u-boot,dm-pre-reloc;
    status = "okay";

    /* USER CODE BEGIN usbphyc_port0 */
    /* USER CODE END usbphyc_port0 */
};

&usbphyc_port1{
    u-boot,dm-pre-reloc;
    status = "okay";

    /* USER CODE BEGIN usbphyc_port1 */
    /* USER CODE END usbphyc_port1 */
};

/* USER CODE BEGIN addons */


&ethernet0 {
    pinctrl-names = "default";
    pinctrl-0 = <&eth1_pins_mx>;
	phy-mode = "rmii";
	max-speed = <100>;
	phy-handle = <&phy0>;
	snps,ps-speed = <100>;
    st,eth_ref_clk_sel;
	status = "okay";

    clock-names = "stmmaceth",
                "mac-clk-tx",
                "mac-clk-rx",
                "ethstp",
                "syscfg-clk",
                "eth-ck";

    clocks = <&rcc ETHMAC>,
            <&rcc ETHTX>,
            <&rcc ETHRX>,
            <&rcc ETHSTP>,
            <&rcc SYSCFG>,
            <&rcc ETHCK_K>;

	snps,reset-gpio = <&gpiod 10 GPIO_ACTIVE_LOW>;
    snps,reset-delays-us = <25>;
    snps,reset-active-low;

    mdio0 {
		#address-cells = <1>;
		#size-cells = <0>;
		compatible = "snps,dwmac-mdio";

		phy0: ethernet-phy-0 {
			reg = <0>;
		};
	};
};

&usbh_ehci {
	phys = <&usbphyc_port0>;
	phy-names = "usb";
	status = "okay";
};

&usbotg_hs {
	dr_mode = "peripheral";
	force-b-session-valid;
	phys = <&usbphyc_port1 0>;
	phy-names = "usb2-phy";
	status = "okay";
};

&fmc {
	pinctrl-names = "default";
	pinctrl-0 = <&fmc_pins_a>;
	status = "okay";
	#address-cells = <1>;
	#size-cells = <0>;

	nand: nand@0 {
		reg = <0>;
		nand-on-flash-bbt;
		#address-cells = <1>;
		#size-cells = <1>;
		
        partition@0 {
            label = "nand-boot";
            reg = <0x00000000 0x01400000>;
        };

        partition@1400000 {
            label = "nand-fs";
            reg = <0x01400000 0x1e000000>;
        };
	};
};


&adc {
	/* ANA0, ANA1 are dedicated pins and don't need pinctrl: only in6. */
	vdd-supply = <&vdd>;
	vdda-supply = <&vdda>;
	vref-supply = <&vdda>;
	status = "okay";
	adc1: adc@0 {
		st,adc-channels = <0 1>;
		/* 16.5 ck_cycles sampling time */
		st,min-sample-time-nsecs = <400>;
		status = "okay";
	};
	jadc1: jadc@0 {
		st,adc-channels = <0 1>;
		/* 16.5 ck_cycles sampling time */
		st,min-sample-time-nsecs = <400>;
		status = "okay";
	};
	/* temperature sensor on adc2 */
	adc2: adc@100 {
		status = "okay";
	};
	adc_temp: temp {
		status = "okay";
	};
};

&dts {
	status = "okay";
};

&pwr {
	status = "okay";
};

&vrefbuf {
	regulator-min-microvolt = <2500000>;
	regulator-max-microvolt = <2500000>;
	vdda-supply = <&vdd>;
	status = "okay";
};


&gpu {
	contiguous-area = <&gpu_reserved>;
	status = "okay";
};

&dma1 {
	sram = <&dma_pool>;
};

&dma2 {
	sram = <&dma_pool>;
};
/* USER CODE END addons */

